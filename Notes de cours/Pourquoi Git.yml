What:
Git est un systeme de controle de version.
    
On peux voir ca comme un systeme de backup de fichier code source. Sauf qu'au lieu d'etre un back-up, la version distante est la version principale, qu'on appelle Master. On essaye toujours de garder la version la plus stable et avancé sur le master.

Si vous devenez un développeur, vous allez avoir besoin d'apprendre git, c'est une certitude. Si vous etes en réseau, vous allez probablement avoir a installer git sur un réseau et vous allez peux-etre aussi l'utiliser pour versionner vos scripts.


Why:
Imaginez que vous etes en train de créer un programme.

Quand vous etes le seul a programmer, il y a une seule version du code; c'est facile a gérer. Si vous etes deux, vous avez deux versions différente, et un lien de transfert de code. A trois, vous avez trois liens de transfert. A 4, il y a 6 lien de transfert; la complexité augmente rapidement.

Pour régler le probleme, vous décider d'utiliser un seul projet que vous travailler tous a distance dessus. Un peu comme Google Docs. Il y a une seule version, mais quand vous etes en train de débugger il risque d'y avoir qqn d'autre qui va modifier le code en meme temps. Et ca va faire planter votre débuggage. Vous devez trouvez une autre solution.

Au lieu d'envoyer le code a tout le monde, vous centralisez la fusion de code. Tout le monde, fusionne son code avec un seul projet. C'est un reseau en étoile. Et ca fonctionne bien, jusqu'a temps que vous soyez 50 développeurs sur le meme projet. Vous allez donc diviser la version centrale en plusieurs branches qui ont des responsabilités distinctes.

Et puisque ce n'était pas assez complexe, n'oubliez pas de prendre en compte que toutes ces versions changent dans le temps, donc on a encore plus de version différentes.

Creation:
Crée par Linus Torvald, le créateur de Linux en 2005, en deux semaines.
Il l'a créé car il n'aimait pas les SCM qui existaient a l'époque.
Et il en avait besoin pour controle les versions du noyau de linux
Et plusieurs personnes étaient toujours a utiliser des fichiers compressé pour se partager le code


Desavantages:
Pas intuitif a apprendre
Mauvais pour la gestion des dépendences
Pas de controle d'acces par défaut, il faut ajouter
Copie les fichiers au complet
Devient lent quand l'historique deviens tres long (+10k commits)