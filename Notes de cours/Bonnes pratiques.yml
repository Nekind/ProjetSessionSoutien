

gitignore:
Vous n'etes pas obligé de committer tous vos fichiers sur git, vous pouvez utiliser le fichier de configuration .gitignore pour dire a git d'ignorer certain fichier et certain dossiers lorsque les versions sont comparé.

Mot de passe et clés SSH:
Il est fortement deconseillé d'include des informations confidentielles sur Github.
Car il y a des bots qui scannent tous les changements pour trouver des mot de passes.
# Meme dans des répertoires privés

Description de modification:
Décrit ce qui a été changé et le pourquoi
Mettre le plus important sur la premiere ligne
Etre assez descriptif (plus de trois mots)


Script:
Puisque git est utilisable a partir de Bash et Cmd, vous pouvez faire des scripts
Ayez un convention avec vos script
Nommer vos scripts git_WipeEverything



Commitez des changements qui sont reliés:
Régler deux bugs different valent d'avoir deux commit différents.
Des petits changements rend plus facile a comprendre ce qui a été fait. 
Et c'est plus simple d'inverse un mauvais changement. 
Ils y a des outils qui permettent de changer seulement une partie du fichier.

Commitez Souvent:
Commiter souvent permet de garder les changement petits ce qui facilite la comparaison de version, et de rester dans le meme scope. Ca permet de partager le code plus souvent avec les autres. Donc tlm a une version plus similaire et ca diminu les risques de conflits. Des gros commit rend les échanges très compliqués.


Evitez de Commit du travail a moitié fait:
    Vous pouvez diviser votre travail en plusieurs parties
    But don’t commit just to have something in the repository before leaving the office at the end of the day. 
    Si vous avez besoin de passer a une autre version du code temporairement, utiliser la commande stash au lieu de commit

Si vous revenez de vacances, prenez le temps de réviser les transactions qui ont été faites en votre absence.
    
Testez votre code avant de faire un Commit:
    Testez pour vous assurez que c'est bien complété et qu'il n'y a pas d'effet secondaire avec le reste du code.
    C'est particulièrement important pour le code non local.

Ecrivez des bon message de commit:
    Résume des changements(50 caracteres).
    Saut de ligne
    Répondre au Pourquoi? et Comment?
    Utilisez des verbes au présent


Ayez un back-up:
Le Controle de Version n'est pas un back-up, c'est votre version principale.

Utilisez des branches:
    La force de git, sont les branches:
    Les branches permettent de séparer plusieurs ligne de développement
    You should use branches extensively in your development workflows: for new features, bug fixes, experiments, ideas…

Choisissez une méthode de travail en équipe:
Vous pouvez choisir votre methode de travail:
    Sur de longue branches
    Branches par sujet
    Merge ou rebase
    Git-flow
Choisissez selon:
    Votre projet
    Votre niveau développement
    Votre methode de deploiment
    Vos préférences d'équipe
Entendez-vous en équipe

    
Avant de travailler, fetch et pull la derniere version.
Apres avoir fini un milestone, commit et push votre travail.

Ne paniquez pas:
Utiliser Git pour la premiere fois peux etre intimidant et vous pouvez avoir peur de faire une erreur qui va tout détruire. 
Tant que vous avez ccommitté votre travail (ou meme juste ajouté avec git add) votre travail ne sera pas perdu pendant au moins deux semaines a moins que vous vous forcer a vraiment le supprimer.

Avant de récupérer une autre version, vous devriez commité ou stashé ce que vous avez de faitavant de faire qqch qui va remplacer votre version actuelle. Ensuite vous pourrez décider quoi faire.

Ne changez pas votre historique:
Au lieu d'annuler ce que vous avez fait, réparer ce que vous avez fait.


Yes, of course git allows you to rewrite public history, but it is problematic for everyone and and thus it is just not best practice to do so.

    
Diviser le travail en plusieurs repo:
    One conceptual group per repository.
    Permission de lecture au niveau du repo
    Different repo pour:
        les fichiers utilisé par plusieurs projets
        les gros fichiers binaires
        La planification d'un superproject
    
    
TRUCS:

Auto-Completion:
Avec Bash, vous pouvez utiliser Git avec de un script d'auto-completion.
https://github.com/git/git/blob/master/contrib/completion/git-completion.bash


Alias Git:
Vous pouvez créer des alias pour vos commandes
Pour utiliser "st" au lieu de "status"
git config --global alias.st status